# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This file contains the lowest level of STF configuration.
#
# Any of the values specified here can be overridden by higher level configuration.
# The search order for a parameters is:
#   - command line arguments
#   - user specific extension properties, eg. ~/.stf.runtimes.properties
#   - user specific stf properties, eg ~/.stf.properties
#   - extensions default properties, eg. stf.runtimes/config/stf.runtimes.properties
#   - default stf properties file, eg. stf/config/stf.properties
#
# If an parameter is specified more than once then the value used is from the 
# first level it is encountered on.
# If the same parameter is specified more than once on a particular level then the
# final value overrides the earlier values.
#
# If the value of a property contains a '${.*}' then every such occurrence is replaced 
# with the value of the corresponding environment variable or the value of another property.
# Resolution of the referenced property starts at the highest level.
# Property values and environment variables may themselves reference other environment 
# variables or properties.
#
# For example:
#   property value: java-execution-args = -Xss:512k ${fixed-args} ${extension-args}
#   env.variable 1: fixed-args = ${java-memory-args} -Xverbose:gc
#   env.variable 2: java-memory-args = -Xms:64m -Xmx:128m
#   env.variable 3: extension-args = -server
# Would be resolved to:
#   java-execution-args = -Xss:512k -Xms:64m -Xmx:128m -Xverbose:gc -server
# 
# Parameters which have a value of 'null' are ignored. They are allowed so that a 
# config file, such as this file, can list and document all possible parameters.
# 


# ------------------------  Properties used by stf.pl  ------------------------

# If dry-run is set to true then the setup,execute and teardown scripts are not executed following generation.
# The default is for it not to be a dry-run, which leads to the test being run following script generation.
dry-run = false

# To allow debug of the code generation step
debug-generation = false
java-debug-args = -Xdebug -Xrunjdwp:transport=dt_socket,address=8999,server=y,suspend=y

# Controls the creation of symbolic links to each timestamed result directory. 
# eg /stf/UtilLoadTest -> /stf/20161107-134621-UtilLoadTest
# This can help when repeatedly running the same test, as the results will always 
# be at a consistent location.
# If you want to use this then set it to true in ~/.stf.properties
create-results-sym-links = false


# ----------------------  Properties used by STF itself  ----------------------

# Logical name of the test to be used.
test = null

# Test specific data can be specified as name value pairs.
# If set then the name/value pairs are available to the test specific plugin.
test-args = null

# Points to the root directory of testing prerequisites. 
# This contains jar files, required perl libraries, test material, etc
# Null by default. If the user does not supply it, stf.pl will search for it.
systemtest-prereqs        = null

# JVM used for each stage
javahome-generation        = ${JAVA_HOME}
javahome-setup             = ${JAVA_HOME}
javahome-execute           = ${JAVA_HOME}
javahome-execute-secondary = ${JAVA_HOME_SECONDARY}
javahome-teardown          = ${JAVA_HOME}

# These properties hold arguments which are given to any java process that is 
# started in the corresponding stage.
# 'java-args' is used as a shorthand for 'java-args-execute' (due to the redirection) 
java-args = null
java-args-setup             = null
java-args-execute           = ${java-args}
java-args-execute-secondary = null
java-args-teardown          = null

# Supplies java arguments when they really must be the very first java arguments.
# These will be used before any java arguments from the test plugin.
java-args-execute-initial = null
java-args-execute-secondary-initial = null

# Undocumented argument for supplying a string to describe the java-args-execute-initial value.
# Added so that the seed used for '-mode=random' can be output to the execute.pl script.
java-args-execute-comment = null
java-args-execute-secondary-comment = null

# Specifies the directory containing STF files or test cases.
# This should point to a directory which has top level project directories that 
# actually contain the test cases.
# ie. it is typically either an eclipse workspace directory or the build output directory
# from building a repository which contains STF test cases.
# The default value is set to the directory two steps up from stf.pl.
# To get STF to look for tests in an additional location, specify -test-root=xxxx. 
# To look in multiple locations, separate the entries with semicolons.
# E.g. -test-root=xxxx;yyyy;zzzz
test-root = null

# All result and debugging files are written below the following directory.
results-root = ${STF_TEMP}

# Set default number of directories to retain under results-root. stf.pl
# will use an LRU algorithm but retain failed tests
retain = 10

# Set default number of directories under results-root that will be taken to
# indicate "We have suffered a very bad failure". This should be > retain above
retain-limit = 20

# If true, remove the results directory if the test passed.
rm-pass = false

# The number of times that a plugins execute method is called.
repeat=1

# This optional property specifies the platform used for perl code generation.
# For example 'win_x86-64' or 'aix_ppc-64'.
# The default is to use the current platform, but setting this value helps with 
# cross platform development/debugging.
platform = null

# Set to 'true' to get information about STF and plugin arguments.
help = false

# Set to true to get STF to list all test plugins within the workspace.
list = false

# For debugging, to get verbose and super-verbose output.
v = false
vv = false